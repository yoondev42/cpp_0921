// 34_operator2.cpp
// 연산자 재정의 함수를 정의할 때 주의할 점

class Point {

};

// 1. 연산자 재정의 함수의 한 개 이상의 인자는 반드시 사용자 정의 타입이어야 합니다.
int operator+(const Point& p, int b) {
  // return a + b;
  return 0;
}
int operator+(int a, const Point& p) {
  // return a + b;
  return 0;
}

// 2. 연산자 재정의 함수의 인자 개수는 고정입니다.
//    + 연산: 2개
//    변경하는 것이 불가능합니다.
// int operator+(Point p, int a, int b)

// 3. 연산자 재정의 우선순위는 변경되지 않습니다.
//   항상 *는 +보다 우선순위가 높습니다.

// 4. 새로운 연산자를 정의하는 것도 불가능합니다.
//  => C++을 통해 제공되는 형태의 연산자만 재정의가 가능합니다.

// 5. 연산자 재정의가 허용되지 않는 연산자도 존재합니다.
//   ::, ,(쉼표), .*, ?:

// 6. 멤버 함수만 허용하는 연산자도 존재합니다.
//   =(대입), ()(호출), [](서브스크립트), ->(참조)

int main() {

}